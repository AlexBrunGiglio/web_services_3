import { EntitySchema, Repository, SelectQueryBuilder } from "typeorm";
import { IQuery } from "typeorm-linq-repository/src/query/interfaces/IQuery";
import { EntityBase } from "typeorm-linq-repository/src/types/EntityBase";
import { EntityConstructor } from "typeorm-linq-repository/src/types/EntityConstructor";
import { RepositoryOptions } from "typeorm-linq-repository/src/types/RepositoryOptions";
import { ILinqRepository } from "typeorm-linq-repository/src/repository/interfaces/ILinqRepository";
/**
 * Base repository operations for TypeORM entities.
 */
export declare class LinqRepository<T extends EntityBase> implements ILinqRepository<T> {
    protected readonly _repository: Repository<T>;
    private readonly _autoGenerateId;
    private readonly _primaryKeyName;
    /**
     * Constructs the repository for the specified entity with, unless otherwise specified,
     * a primry key named "id" that is auto-generated.
     * @param entityType The entity whose repository to create.
     * @param options Options for setting up the repository.
     */
    constructor(entityType: EntityConstructor<T> | EntitySchema<T>, options?: RepositoryOptions<T>);
    get typeormRepository(): Repository<T>;
    create<E extends T | T[]>(entities: E): Promise<E>;
    createQueryBuilder(alias: string): SelectQueryBuilder<T>;
    delete(entities: number | string | T | T[]): Promise<boolean>;
    getAll(): IQuery<T, T[]>;
    getById(id: number | string): IQuery<T, T>;
    getOne(): IQuery<T, T>;
    update<E extends T | T[]>(entities: E): Promise<E>;
    upsert<E extends T | T[]>(entities: E): Promise<E>;
}
