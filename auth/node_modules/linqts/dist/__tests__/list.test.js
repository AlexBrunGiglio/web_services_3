"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ava_1 = require("ava");
var list_1 = require("../src/list");
var Package = /** @class */ (function () {
    function Package(p) {
        this.Company = p.Company;
        this.Weight = p.Weight;
        this.TrackingNumber = p.TrackingNumber;
    }
    return Package;
}());
var Person = /** @class */ (function () {
    function Person(pet) {
        this.Name = pet.Name;
        this.Age = pet.Age;
    }
    return Person;
}());
var Pet = /** @class */ (function () {
    function Pet(pet) {
        this.Name = pet.Name;
        this.Age = pet.Age;
        this.Owner = pet.Owner;
        this.Vaccinated = pet.Vaccinated;
    }
    return Pet;
}());
var Dog = /** @class */ (function (_super) {
    __extends(Dog, _super);
    function Dog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Dog.prototype.Speak = function () {
        return 'Bark';
    };
    return Dog;
}(Pet));
var PetOwner = /** @class */ (function () {
    function PetOwner(Name, Pets) {
        this.Name = Name;
        this.Pets = Pets;
    }
    return PetOwner;
}());
var Product = /** @class */ (function () {
    function Product(product) {
        this.Name = product.Name;
        this.Code = product.Code;
    }
    return Product;
}());
ava_1.default('Add', function (t) {
    var list = new list_1.default();
    list.Add('hey');
    t.is(list.First(), 'hey');
});
ava_1.default('Append', function (t) {
    var list = new list_1.default();
    list.AddRange(['hey', "what's", 'up']);
    list.Append('there');
    t.is(list.Last(), 'there');
});
ava_1.default('Prepend', function (t) {
    var list = new list_1.default();
    list.AddRange(['hey', "what's", 'up']);
    list.Prepend('there');
    t.is(list.First(), 'there');
});
ava_1.default('AddRange', function (t) {
    var list = new list_1.default();
    list.AddRange(['hey', "what's", 'up']);
    t.deepEqual(list.ToArray(), ['hey', "what's", 'up']);
});
ava_1.default('Aggregate', function (t) {
    var sentence = 'the quick brown fox jumps over the lazy dog';
    var reversed = 'dog lazy the over jumps fox brown quick the ';
    var words = new list_1.default(sentence.split(' '));
    t.is(words.Aggregate(function (workingSentence, next) { return next + ' ' + workingSentence; }, ''), reversed);
});
ava_1.default('All', function (t) {
    var pets = new list_1.default([
        new Pet({ Age: 10, Name: 'Barley' }),
        new Pet({ Age: 4, Name: 'Boots' }),
        new Pet({ Age: 6, Name: 'Whiskers' })
    ]);
    // determine whether all pet names
    // in the array start with 'B'.
    t.false(pets.All(function (pet) { return pet.Name.startsWith('B'); }));
});
ava_1.default('Any', function (t) {
    var pets = new list_1.default([
        new Pet({ Age: 8, Name: 'Barley', Vaccinated: true }),
        new Pet({ Age: 4, Name: 'Boots', Vaccinated: false }),
        new Pet({ Age: 1, Name: 'Whiskers', Vaccinated: false })
    ]);
    // determine whether any pets over age 1 are also unvaccinated.
    t.true(pets.Any(function (p) { return p.Age > 1 && p.Vaccinated === false; }));
    t.true(pets.Any());
});
ava_1.default('Average', function (t) {
    var grades = new list_1.default([78, 92, 100, 37, 81]);
    var people = new list_1.default([
        { Age: 15, Name: 'Cathy' },
        { Age: 25, Name: 'Alice' },
        { Age: 50, Name: 'Bob' }
    ]);
    t.is(grades.Average(), 77.6);
    t.is(people.Average(function (x) { return x.Age; }), 30);
});
ava_1.default('Cast', function (t) {
    var pets = new list_1.default([
        new Dog({ Age: 8, Name: 'Barley', Vaccinated: true }),
        new Pet({ Age: 1, Name: 'Whiskers', Vaccinated: false })
    ]);
    var dogs = pets.Cast();
    t.true(typeof dogs.First().Speak === 'function');
    t.is(dogs.First().Speak(), 'Bark');
    t.true(typeof dogs.Last().Speak === 'undefined');
});
ava_1.default('Clear', function (t) {
    var pets = new list_1.default([
        new Dog({ Age: 8, Name: 'Barley', Vaccinated: true }),
        new Pet({ Age: 1, Name: 'Whiskers', Vaccinated: false })
    ]);
    t.is(pets.Count(), 2);
    pets.Clear();
    t.is(pets.Count(), 0);
});
ava_1.default('Concat', function (t) {
    var cats = new list_1.default([
        new Pet({ Age: 8, Name: 'Barley' }),
        new Pet({ Age: 4, Name: 'Boots' }),
        new Pet({ Age: 1, Name: 'Whiskers' })
    ]);
    var dogs = new list_1.default([
        new Pet({ Age: 3, Name: 'Bounder' }),
        new Pet({ Age: 14, Name: 'Snoopy' }),
        new Pet({ Age: 9, Name: 'Fido' })
    ]);
    var expected = ['Barley', 'Boots', 'Whiskers', 'Bounder', 'Snoopy', 'Fido'];
    t.deepEqual(cats
        .Select(function (cat) { return cat.Name; })
        .Concat(dogs.Select(function (dog) { return dog.Name; }))
        .ToArray(), expected);
});
ava_1.default('Contains', function (t) {
    var fruits = new list_1.default([
        'apple',
        'banana',
        'mango',
        'orange',
        'passionfruit',
        'grape'
    ]);
    t.true(fruits.Contains('mango'));
});
ava_1.default('Count', function (t) {
    var fruits = new list_1.default([
        'apple',
        'banana',
        'mango',
        'orange',
        'passionfruit',
        'grape'
    ]);
    t.is(fruits.Count(), 6);
    t.is(fruits.Count(function (x) { return x.length > 5; }), 3);
});
ava_1.default('DefaultIfEmpty', function (t) {
    var pets = new list_1.default([
        new Pet({ Age: 8, Name: 'Barley' }),
        new Pet({ Age: 4, Name: 'Boots' }),
        new Pet({ Age: 1, Name: 'Whiskers' })
    ]);
    t.deepEqual(pets
        .DefaultIfEmpty()
        .Select(function (pet) { return pet.Name; })
        .ToArray(), ['Barley', 'Boots', 'Whiskers']);
    var numbers = new list_1.default();
    t.deepEqual(numbers.DefaultIfEmpty(0).ToArray(), [0]);
});
ava_1.default('Distinct', function (t) {
    var ages = new list_1.default([21, 46, 46, 55, 17, 21, 55, 55]);
    var pets = new list_1.default([
        new Pet({ Age: 1, Name: 'Whiskers' }),
        new Pet({ Age: 1, Name: 'Whiskers' }),
        new Pet({ Age: 8, Name: 'Barley' }),
        new Pet({ Age: 8, Name: 'Barley' }),
        new Pet({ Age: 9, Name: 'Corey' })
    ]);
    var expected = new list_1.default([
        new Pet({ Age: 1, Name: 'Whiskers' }),
        new Pet({ Age: 8, Name: 'Barley' }),
        new Pet({ Age: 9, Name: 'Corey' })
    ]);
    t.deepEqual(ages.Distinct(), new list_1.default([21, 46, 55, 17]));
    t.deepEqual(pets.Distinct(), expected);
});
ava_1.default('DistinctBy', function (t) {
    var pets = new list_1.default([
        new Pet({ Age: 1, Name: 'Whiskers' }),
        new Pet({ Age: 4, Name: 'Boots' }),
        new Pet({ Age: 8, Name: 'Barley' }),
        new Pet({ Age: 4, Name: 'Daisy' })
    ]);
    var result = new list_1.default([
        new Pet({ Age: 1, Name: 'Whiskers' }),
        new Pet({ Age: 4, Name: 'Boots' }),
        new Pet({ Age: 8, Name: 'Barley' })
    ]);
    t.deepEqual(pets.DistinctBy(function (pet) { return pet.Age; }), result);
});
ava_1.default('ElementAt', function (t) {
    var a = new list_1.default(['hey', 'hola', 'que', 'tal']);
    t.is(a.ElementAt(0), 'hey');
    t.throws(function () { return a.ElementAt(4); }, /ArgumentOutOfRangeException: index is less than 0 or greater than or equal to the number of elements in source./);
    t.throws(function () { return a.ElementAt(-1); }, /ArgumentOutOfRangeException: index is less than 0 or greater than or equal to the number of elements in source./);
});
ava_1.default('ElementAtOrDefault', function (t) {
    var a = new list_1.default(['hey', 'hola', 'que', 'tal']);
    var b = new list_1.default([2, 1, 0, -1, -2]);
    t.is(a.ElementAtOrDefault(0), 'hey');
    t.is(b.ElementAtOrDefault(2), 0);
    t.is(a.ElementAtOrDefault(4), undefined);
});
ava_1.default('Except', function (t) {
    var numbers1 = new list_1.default([2.0, 2.1, 2.2, 2.3, 2.4, 2.5]);
    var numbers2 = new list_1.default([2.2, 2.3]);
    t.deepEqual(numbers1.Except(numbers2).ToArray(), [2, 2.1, 2.4, 2.5]);
});
ava_1.default('First', function (t) {
    t.is(new list_1.default(['hey', 'hola', 'que', 'tal']).First(), 'hey');
    t.is(new list_1.default([1, 2, 3, 4, 5]).First(function (x) { return x > 2; }), 3);
    t.throws(function () { return new list_1.default().First(); }, /InvalidOperationException: The source sequence is empty./);
});
ava_1.default('FirstOrDefault', function (t) {
    t.is(new list_1.default(['hey', 'hola', 'que', 'tal']).FirstOrDefault(), 'hey');
    t.is(new list_1.default().FirstOrDefault(), undefined);
});
ava_1.default('ForEach', function (t) {
    var names = new list_1.default(['Bruce', 'Alfred', 'Tim', 'Richard']);
    var test = '';
    names.ForEach(function (x, i) { return (test += x + " " + i + " "); });
    t.is(test, 'Bruce 0 Alfred 1 Tim 2 Richard 3 ');
});
ava_1.default('GroupBy', function (t) {
    var pets = new list_1.default([
        new Pet({ Age: 8, Name: 'Barley' }),
        new Pet({ Age: 4, Name: 'Boots' }),
        new Pet({ Age: 1, Name: 'Whiskers' }),
        new Pet({ Age: 4, Name: 'Daisy' })
    ]);
    var result = {
        '1': ['Whiskers'],
        '4': ['Boots', 'Daisy'],
        '8': ['Barley']
    };
    t.deepEqual(pets.GroupBy(function (pet) { return pet.Age; }, function (pet) { return pet.Name; }), result);
});
ava_1.default('GroupJoin', function (t) {
    var magnus = new Person({ Name: 'Hedlund, Magnus' });
    var terry = new Person({ Name: 'Adams, Terry' });
    var charlotte = new Person({ Name: 'Weiss, Charlotte' });
    var barley = new Pet({ Name: 'Barley', Owner: terry });
    var boots = new Pet({ Name: 'Boots', Owner: terry });
    var whiskers = new Pet({ Name: 'Whiskers', Owner: charlotte });
    var daisy = new Pet({ Name: 'Daisy', Owner: magnus });
    var people = new list_1.default([magnus, terry, charlotte]);
    var pets = new list_1.default([barley, boots, whiskers, daisy]);
    // create a list where each element is an anonymous
    // type that contains a person's name and
    // a collection of names of the pets they own.
    var query = people.GroupJoin(pets, function (person) { return person; }, function (pet) { return pet.Owner; }, function (person, petCollection) { return ({
        OwnerName: person.Name,
        Pets: petCollection.Select(function (pet) { return pet.Name; })
    }); });
    var expected = [
        'Hedlund, Magnus: Daisy',
        'Adams, Terry: Barley,Boots',
        'Weiss, Charlotte: Whiskers'
    ];
    t.deepEqual(query.Select(function (obj) { return obj.OwnerName + ": " + obj.Pets.ToArray(); }).ToArray(), expected);
});
ava_1.default('IndexOf', function (t) {
    var fruits = new list_1.default([
        'apple',
        'banana',
        'mango',
        'orange',
        'passionfruit',
        'grape'
    ]);
    var barley = new Pet({ Age: 8, Name: 'Barley', Vaccinated: true });
    var boots = new Pet({ Age: 4, Name: 'Boots', Vaccinated: false });
    var whiskers = new Pet({ Age: 1, Name: 'Whiskers', Vaccinated: false });
    var pets = new list_1.default([barley, boots, whiskers]);
    t.is(fruits.IndexOf('orange'), 3);
    t.is(fruits.IndexOf('strawberry'), -1);
    t.is(pets.IndexOf(boots), 1);
});
ava_1.default('Insert', function (t) {
    var pets = new list_1.default([
        new Pet({ Age: 10, Name: 'Barley' }),
        new Pet({ Age: 4, Name: 'Boots' }),
        new Pet({ Age: 6, Name: 'Whiskers' })
    ]);
    var newPet = new Pet({ Age: 12, Name: 'Max' });
    pets.Insert(0, newPet);
    pets.Insert(pets.Count(), newPet);
    t.is(pets.First(), newPet);
    t.is(pets.Last(), newPet);
    t.throws(function () { return pets.Insert(-1, newPet); }, /Index is out of range./);
    t.throws(function () { return pets.Insert(pets.Count() + 1, newPet); }, /Index is out of range./);
});
ava_1.default('Intersect', function (t) {
    var id1 = new list_1.default([44, 26, 92, 30, 71, 38]);
    var id2 = new list_1.default([39, 59, 83, 47, 26, 4, 30]);
    t.is(id1.Intersect(id2).Sum(function (x) { return x; }), 56);
});
ava_1.default('Join', function (t) {
    var magnus = new Person({ Name: 'Hedlund, Magnus' });
    var terry = new Person({ Name: 'Adams, Terry' });
    var charlotte = new Person({ Name: 'Weiss, Charlotte' });
    var barley = new Pet({ Name: 'Barley', Owner: terry });
    var boots = new Pet({ Name: 'Boots', Owner: terry });
    var whiskers = new Pet({ Name: 'Whiskers', Owner: charlotte });
    var daisy = new Pet({ Name: 'Daisy', Owner: magnus });
    var people = new list_1.default([magnus, terry, charlotte]);
    var pets = new list_1.default([barley, boots, whiskers, daisy]);
    // create a list of Person-Pet pairs where
    // each element is an anonymous type that contains a
    // pet's name and the name of the Person that owns the Pet.
    var query = people.Join(pets, function (person) { return person; }, function (pet) { return pet.Owner; }, function (person, pet) { return ({ OwnerName: person.Name, Pet: pet.Name }); });
    var expected = [
        'Hedlund, Magnus - Daisy',
        'Adams, Terry - Barley',
        'Adams, Terry - Boots',
        'Weiss, Charlotte - Whiskers'
    ];
    t.deepEqual(query.Select(function (obj) { return obj.OwnerName + " - " + obj.Pet; }).ToArray(), expected);
});
ava_1.default('Last', function (t) {
    t.is(new list_1.default(['hey', 'hola', 'que', 'tal']).Last(), 'tal');
    t.is(new list_1.default([1, 2, 3, 4, 5]).Last(function (x) { return x > 2; }), 5);
    t.throws(function () { return new list_1.default().Last(); }, /InvalidOperationException: The source sequence is empty./);
});
ava_1.default('LastOrDefault', function (t) {
    t.is(new list_1.default(['hey', 'hola', 'que', 'tal']).LastOrDefault(), 'tal');
    t.is(new list_1.default().LastOrDefault(), undefined);
});
ava_1.default('Max', function (t) {
    var people = new list_1.default([
        { Age: 15, Name: 'Cathy' },
        { Age: 25, Name: 'Alice' },
        { Age: 50, Name: 'Bob' }
    ]);
    t.is(people.Max(function (x) { return x.Age; }), 50);
    t.is(new list_1.default([1, 2, 3, 4, 5]).Max(), 5);
});
ava_1.default('Min', function (t) {
    var people = new list_1.default([
        { Age: 15, Name: 'Cathy' },
        { Age: 25, Name: 'Alice' },
        { Age: 50, Name: 'Bob' }
    ]);
    t.is(people.Min(function (x) { return x.Age; }), 15);
    t.is(new list_1.default([1, 2, 3, 4, 5]).Min(), 1);
});
ava_1.default('OfType', function (t) {
    var pets = new list_1.default([
        new Dog({ Age: 8, Name: 'Barley', Vaccinated: true }),
        new Pet({ Age: 1, Name: 'Whiskers', Vaccinated: false })
    ]);
    var anyArray = new list_1.default(['dogs', 'cats', 13, true]);
    t.is(anyArray.OfType(String).Count(), 2);
    t.is(anyArray.OfType(Number).Count(), 1);
    t.is(anyArray.OfType(Boolean).Count(), 1);
    t.is(anyArray.OfType(Function).Count(), 0);
    t.is(pets.OfType(Dog).Count(), 1);
    t.is(pets
        .OfType(Dog)
        .First()
        .Speak(), 'Bark');
});
ava_1.default('OrderBy', function (t) {
    var expected = [1, 2, 3, 4, 5, 6];
    t.deepEqual(new list_1.default([4, 5, 6, 3, 2, 1]).OrderBy(function (x) { return x; }).ToArray(), expected);
    t.deepEqual(new list_1.default(['Deutschland', 'Griechenland', 'Ägypten'])
        .OrderBy(function (x) { return x; }, function (a, b) { return a.localeCompare(b); })
        .ToArray(), ['Ägypten', 'Deutschland', 'Griechenland']);
});
ava_1.default('OrderByDescending', function (t) {
    t.deepEqual(new list_1.default([4, 5, 6, 3, 2, 1]).OrderByDescending(function (x) { return x; }).ToArray(), [6, 5, 4, 3, 2, 1]);
});
ava_1.default('ThenBy', function (t) {
    var fruits = new list_1.default([
        'grape',
        'passionfruit',
        'banana',
        'mango',
        'orange',
        'raspberry',
        'apple',
        'blueberry'
    ]);
    // sort the strings first by their length and then
    // alphabetically by passing the identity selector function.
    var expected = [
        'apple',
        'grape',
        'mango',
        'banana',
        'orange',
        'blueberry',
        'raspberry',
        'passionfruit'
    ];
    t.deepEqual(fruits
        .OrderBy(function (fruit) { return fruit.length; })
        .ThenBy(function (fruit) { return fruit; })
        .ToArray(), expected);
    var expectedNums = [1, 2, 3, 4, 5, 6];
    // test omission of OrderBy
    t.deepEqual(new list_1.default([4, 5, 6, 3, 2, 1]).ThenBy(function (x) { return x; }).ToArray(), expectedNums);
});
// see https://github.com/kutyel/linq.ts/issues/23
ava_1.default('ThenByMultiple', function (t) {
    var x = { a: 2, b: 1, c: 1 };
    var y = { a: 1, b: 2, c: 2 };
    var z = { a: 1, b: 1, c: 3 };
    var unsorted = new list_1.default([x, y, z]);
    var sorted = unsorted
        .OrderBy(function (u) { return u.a; })
        .ThenBy(function (u) { return u.b; })
        .ThenBy(function (u) { return u.c; })
        .ToArray();
    t.is(sorted[0], z);
    t.is(sorted[1], y);
    t.is(sorted[2], x);
});
ava_1.default('ThenByDescending', function (t) {
    var fruits = new list_1.default([
        'grape',
        'passionfruit',
        'banana',
        'mango',
        'orange',
        'raspberry',
        'apple',
        'blueberry'
    ]);
    // sort the strings first by their length and then
    // alphabetically descending by passing the identity selector function.
    var expected = [
        'mango',
        'grape',
        'apple',
        'orange',
        'banana',
        'raspberry',
        'blueberry',
        'passionfruit'
    ];
    t.deepEqual(fruits
        .OrderBy(function (fruit) { return fruit.length; })
        .ThenByDescending(function (fruit) { return fruit; })
        .ToArray(), expected);
    t.deepEqual(new list_1.default([4, 5, 6, 3, 2, 1]).ThenByDescending(function (x) { return x; }).ToArray(), [6, 5, 4, 3, 2, 1]);
});
ava_1.default('Remove', function (t) {
    var fruits = new list_1.default([
        'apple',
        'banana',
        'mango',
        'orange',
        'passionfruit',
        'grape'
    ]);
    var barley = new Pet({ Age: 8, Name: 'Barley', Vaccinated: true });
    var boots = new Pet({ Age: 4, Name: 'Boots', Vaccinated: false });
    var whiskers = new Pet({ Age: 1, Name: 'Whiskers', Vaccinated: false });
    var pets = new list_1.default([barley, boots, whiskers]);
    var lessPets = new list_1.default([barley, whiskers]);
    t.true(fruits.Remove('orange'));
    t.false(fruits.Remove('strawberry'));
    t.true(pets.Remove(boots));
    t.deepEqual(pets, lessPets);
});
ava_1.default('RemoveAll', function (t) {
    var dinosaurs = new list_1.default([
        'Compsognathus',
        'Amargasaurus',
        'Oviraptor',
        'Velociraptor',
        'Deinonychus',
        'Dilophosaurus',
        'Gallimimus',
        'Triceratops'
    ]);
    var lessDinosaurs = new list_1.default([
        'Compsognathus',
        'Oviraptor',
        'Velociraptor',
        'Deinonychus',
        'Gallimimus',
        'Triceratops'
    ]);
    t.deepEqual(dinosaurs.RemoveAll(function (x) { return x.endsWith('saurus'); }), lessDinosaurs);
});
ava_1.default('RemoveAt', function (t) {
    var dinosaurs = new list_1.default([
        'Compsognathus',
        'Amargasaurus',
        'Oviraptor',
        'Velociraptor',
        'Deinonychus',
        'Dilophosaurus',
        'Gallimimus',
        'Triceratops'
    ]);
    var lessDinosaurs = new list_1.default([
        'Compsognathus',
        'Amargasaurus',
        'Oviraptor',
        'Deinonychus',
        'Dilophosaurus',
        'Gallimimus',
        'Triceratops'
    ]);
    dinosaurs.RemoveAt(3);
    t.deepEqual(dinosaurs, lessDinosaurs);
});
ava_1.default('Reverse', function (t) {
    t.deepEqual(new list_1.default([1, 2, 3, 4, 5]).Reverse().ToArray(), [
        5,
        4,
        3,
        2,
        1
    ]);
});
ava_1.default('Select', function (t) {
    t.deepEqual(new list_1.default([1, 2, 3]).Select(function (x) { return x * 2; }).ToArray(), [
        2,
        4,
        6
    ]);
});
ava_1.default('SelectMany', function (t) {
    var petOwners = new list_1.default([
        new PetOwner('Higa, Sidney', new list_1.default([new Pet({ Name: 'Scruffy' }), new Pet({ Name: 'Sam' })])),
        new PetOwner('Ashkenazi, Ronen', new list_1.default([new Pet({ Name: 'Walker' }), new Pet({ Name: 'Sugar' })])),
        new PetOwner('Price, Vernette', new list_1.default([
            new Pet({ Name: 'Scratches' }),
            new Pet({ Name: 'Diesel' })
        ]))
    ]);
    var expected = ['Scruffy', 'Sam', 'Walker', 'Sugar', 'Scratches', 'Diesel'];
    t.deepEqual(petOwners
        .SelectMany(function (petOwner) { return petOwner.Pets; })
        .Select(function (pet) { return pet.Name; })
        .ToArray(), expected);
});
ava_1.default('SequenceEqual', function (t) {
    var pet1 = new Pet({ Age: 2, Name: 'Turbo' });
    var pet2 = new Pet({ Age: 8, Name: 'Peanut' });
    // create three lists of pets.
    var pets1 = new list_1.default([pet1, pet2]);
    var pets2 = new list_1.default([pet1, pet2]);
    var pets3 = new list_1.default([pet1]);
    t.true(pets1.SequenceEqual(pets2));
    t.false(pets1.SequenceEqual(pets3));
});
ava_1.default('Single', function (t) {
    var fruits1 = new list_1.default();
    var fruits2 = new list_1.default(['orange']);
    var fruits3 = new list_1.default(['orange', 'apple']);
    var numbers1 = new list_1.default([1, 2, 3, 4, 5, 5]);
    t.is(fruits2.Single(), 'orange');
    t.throws(function () { return fruits1.Single(); }, /The collection does not contain exactly one element./);
    t.throws(function () { return fruits3.Single(); }, /The collection does not contain exactly one element./);
    t.is(numbers1.Single(function (x) { return x === 1; }), 1);
    t.throws(function () { return numbers1.Single(function (x) { return x === 5; }); }, /The collection does not contain exactly one element./);
    t.throws(function () { return numbers1.Single(function (x) { return x > 5; }); }, /The collection does not contain exactly one element./);
});
ava_1.default('SingleOrDefault', function (t) {
    var fruits1 = new list_1.default();
    var fruits2 = new list_1.default(['orange']);
    var fruits3 = new list_1.default(['orange', 'apple']);
    var numbers1 = new list_1.default([1, 2, 3, 4, 5, 5]);
    t.is(fruits1.SingleOrDefault(), undefined);
    t.is(fruits2.SingleOrDefault(), 'orange');
    t.throws(function () { return fruits3.SingleOrDefault(); }, /The collection does not contain exactly one element./);
    t.is(numbers1.SingleOrDefault(function (x) { return x === 1; }), 1);
    t.is(numbers1.SingleOrDefault(function (x) { return x > 5; }), undefined);
    t.throws(function () { return numbers1.SingleOrDefault(function (x) { return x === 5; }); }, /The collection does not contain exactly one element./);
});
ava_1.default('Skip', function (t) {
    var grades = new list_1.default([59, 82, 70, 56, 92, 98, 85]);
    t.deepEqual(grades
        .OrderByDescending(function (x) { return x; })
        .Skip(3)
        .ToArray(), [82, 70, 59, 56]);
});
ava_1.default('SkipLast', function (t) {
    var grades = new list_1.default([59, 82, 70, 56, 92, 98, 85]);
    t.deepEqual(grades
        .OrderByDescending(function (x) { return x; })
        .SkipLast(3)
        .ToArray(), [98, 92, 85, 82]);
});
ava_1.default('SkipWhile', function (t) {
    var grades = new list_1.default([59, 82, 70, 56, 92, 98, 85]);
    t.deepEqual(grades
        .OrderByDescending(function (x) { return x; })
        .SkipWhile(function (grade) { return grade >= 80; })
        .ToArray(), [70, 59, 56]);
});
ava_1.default('Sum', function (t) {
    var people = new list_1.default([
        { Age: 15, Name: 'Cathy' },
        { Age: 25, Name: 'Alice' },
        { Age: 50, Name: 'Bob' }
    ]);
    t.is(new list_1.default([2, 3, 5]).Sum(), 10);
    t.is(people.Sum(function (x) { return x.Age; }), 90);
});
ava_1.default('Take', function (t) {
    var grades = new list_1.default([59, 82, 70, 56, 92, 98, 85]);
    t.deepEqual(grades
        .OrderByDescending(function (x) { return x; })
        .Take(3)
        .ToArray(), [98, 92, 85]);
});
ava_1.default('TakeLast', function (t) {
    var grades = new list_1.default([59, 82, 70, 56, 92, 98, 85]);
    t.deepEqual(grades
        .OrderByDescending(function (x) { return x; })
        .TakeLast(3)
        .ToArray(), [70, 59, 56]);
});
ava_1.default('TakeWhile', function (t) {
    var expected = ['apple', 'banana', 'mango'];
    var fruits = new list_1.default([
        'apple',
        'banana',
        'mango',
        'orange',
        'passionfruit',
        'grape'
    ]);
    t.deepEqual(fruits.TakeWhile(function (fruit) { return fruit !== 'orange'; }).ToArray(), expected);
});
ava_1.default('ToArray', function (t) {
    t.deepEqual(new list_1.default([1, 2, 3, 4, 5]).ToArray(), [1, 2, 3, 4, 5]);
});
ava_1.default('ToDictionary', function (t) {
    var people = new list_1.default([
        { Age: 15, Name: 'Cathy' },
        { Age: 25, Name: 'Alice' },
        { Age: 50, Name: 'Bob' }
    ]);
    var dictionary = people.ToDictionary(function (x) { return x.Name; });
    t.deepEqual(dictionary['Bob'], { Age: 50, Name: 'Bob' });
    t.is(dictionary['Bob'].Age, 50);
    var dictionary2 = people.ToDictionary(function (x) { return x.Name; }, function (y) { return y.Age; });
    t.is(dictionary2['Alice'], 25);
    // Dictionary should behave just like in C#
    t.is(dictionary.Max(function (x) { return x.Value.Age; }), 50);
    t.is(dictionary.Min(function (x) { return x.Value.Age; }), 15);
    var expectedKeys = new list_1.default(['Cathy', 'Alice', 'Bob']);
    t.deepEqual(dictionary.Select(function (x) { return x.Key; }), expectedKeys);
    t.deepEqual(dictionary.Select(function (x) { return x.Value; }), people);
});
ava_1.default('ToList', function (t) {
    t.deepEqual(new list_1.default([1, 2, 3]).ToList().ToArray(), [1, 2, 3]);
});
ava_1.default('ToLookup', function (t) {
    // create a list of Packages
    var packages = new list_1.default([
        new Package({
            Company: 'Coho Vineyard',
            TrackingNumber: 89453312,
            Weight: 25.2
        }),
        new Package({
            Company: 'Lucerne Publishing',
            TrackingNumber: 89112755,
            Weight: 18.7
        }),
        new Package({
            Company: 'Wingtip Toys',
            TrackingNumber: 299456122,
            Weight: 6.0
        }),
        new Package({
            Company: 'Contoso Pharmaceuticals',
            TrackingNumber: 670053128,
            Weight: 9.3
        }),
        new Package({
            Company: 'Wide World Importers',
            TrackingNumber: 4665518773,
            Weight: 33.8
        })
    ]);
    // create a Lookup to organize the packages.
    // use the first character of Company as the key value.
    // select Company appended to TrackingNumber
    // as the element values of the Lookup.
    var lookup = packages.ToLookup(function (p) { return p.Company.substring(0, 1); }, function (p) { return p.Company + ' ' + p.TrackingNumber; });
    var result = {
        C: ['Coho Vineyard 89453312', 'Contoso Pharmaceuticals 670053128'],
        L: ['Lucerne Publishing 89112755'],
        W: ['Wingtip Toys 299456122', 'Wide World Importers 4665518773']
    };
    t.deepEqual(lookup, result);
});
ava_1.default('Union', function (t) {
    var ints1 = new list_1.default([5, 3, 9, 7, 5, 9, 3, 7]);
    var ints2 = new list_1.default([8, 3, 6, 4, 4, 9, 1, 0]);
    t.deepEqual(ints1.Union(ints2).ToArray(), [5, 3, 9, 7, 8, 6, 4, 1, 0]);
    var result = [
        { Name: 'apple', Code: 9 },
        { Name: 'orange', Code: 4 },
        { Name: 'lemon', Code: 12 }
    ];
    var store1 = new list_1.default([
        new Product({ Name: 'apple', Code: 9 }),
        new Product({ Name: 'orange', Code: 4 })
    ]);
    var store2 = new list_1.default([
        new Product({ Name: 'apple', Code: 9 }),
        new Product({ Name: 'lemon', Code: 12 })
    ]);
    t.skip.deepEqual(store1.Union(store2).ToArray(), result);
});
ava_1.default('Where', function (t) {
    var fruits = new list_1.default([
        'apple',
        'passionfruit',
        'banana',
        'mango',
        'orange',
        'blueberry',
        'grape',
        'strawberry'
    ]);
    var expected = ['apple', 'mango', 'grape'];
    t.deepEqual(fruits.Where(function (fruit) { return fruit.length < 6; }).ToArray(), expected);
});
ava_1.default('Zip', function (t) {
    var numbers = new list_1.default([1, 2, 3, 4]);
    var words = new list_1.default(['one', 'two', 'three']);
    t.deepEqual(numbers.Zip(words, function (first, second) { return first + " " + second; }).ToArray(), ['1 one', '2 two', '3 three']);
    // larger second array
    var expected = ['one 1', 'two 2', 'three 3'];
    var numbers2 = new list_1.default([1, 2, 3, 4]);
    var words2 = new list_1.default(['one', 'two', 'three']);
    t.deepEqual(words2.Zip(numbers2, function (first, second) { return first + " " + second; }).ToArray(), expected);
});
ava_1.default('Where().Select()', function (t) {
    t.deepEqual(new list_1.default([1, 2, 3, 4, 5])
        .Where(function (x) { return x > 3; })
        .Select(function (y) { return y * 2; })
        .ToArray(), [8, 10]);
    t.deepEqual(new list_1.default([1, 2, 3, 4, 5])
        .Where(function (x) { return x > 3; })
        .Select(function (y) { return y + 'a'; })
        .ToArray(), ['4a', '5a']);
});
//# sourceMappingURL=list.test.js.map